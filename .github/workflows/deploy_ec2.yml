name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout el código
      - name: Checkout code
        uses: actions/checkout@v3

      # Paso 2: Configurar las credenciales de AWS
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Cambia la región si es necesario

      # Paso 3: Crear la instancia EC2
      - name: Create EC2 Instance
        id: create_ec2
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-0453ec754f44f9a4a \ # Reemplaza con la AMI adecuada
            --instance-type t2.micro \
            --key-name github-actions \  # Asegúrate de que esta clave exista en tu cuenta AWS
            --security-group-ids sg-069bcf83cf20c922d \ # Reemplaza con tu ID de grupo de seguridad
            --subnet-id subnet-0771bfc4dab8295c7 \ # Reemplaza con tu ID de subred
            --associate-public-ip-address \
            --query 'Instances[0].InstanceId' \
            --output text)

          echo "Created EC2 instance with ID: $INSTANCE_ID"

          # Paso 4: Obtener la IP pública de la instancia
          EC2_PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)

          echo "EC2 public IP: $EC2_PUBLIC_IP"
          echo "::set-output name=ec2_public_ip::$EC2_PUBLIC_IP"

      # Paso 5: Copiar los archivos a la instancia EC2
      - name: Copy files to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/github-actions.pem -r ./ ec2-user@${{ steps.create_ec2.outputs.ec2_public_ip }}:/home/ec2-user/app
